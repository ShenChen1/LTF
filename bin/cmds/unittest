#!/usr/bin/env bash

set -aeu
source _shellflags

check_test_config() {
    case "$TESTCONFIG" in
    /*) true ;;
    *) TESTCONFIG="$(pwd)/$TESTCONFIG" ;;
    esac

    checktestconfig || exit 1
}

process_host_script() {
    local tmp=$(mktemp /tmp/$(basename $0).XXXXX)
    echo "sh $1" >>$tmp
    create_unittest $tmp $1
}

process_target_script() {
    local tmp=$(mktemp /tmp/$(basename $0).XXXXX)
    echo "putfile \'$1\' \'$1\'" >>$tmp
    echo "invoke \'sh $1\'" >>$tmp
    echo "invoke \'rm $1\'" >>$tmp
    create_unittest $tmp $1
}

process_target_cpp() {
    local tmp=$(mktemp /tmp/$(basename $0).XXXXX)
    local app=__${1%%.*}
    echo "compile \'$1\'" >>$tmp
    echo "putfile \'$app\' \'$app\'" >>$tmp
    echo "invoke \'chmod +x $app && ./$app\'" >>$tmp
    echo "invoke \'rm $app\'" >>$tmp
    create_unittest $tmp $1
}

create_unittest() {
    local -r cmdfile="$1"
    local -r testname="${2%%.*}"
    local -r classname="${PWD##*/}"
    local -r pyunittest="__unittest_${classname}_${testname}.py"

    local cmdlines="["
    while read line; do
        cmdlines="${cmdlines}\"${line}\", "
    done <"$cmdfile"
    cmdlines="${cmdlines} \"true\"]"

    cat >$pyunittest <<EOF
# automatically created by $(basename $0)
import os
import unittest

class Test__${classname}(unittest.TestCase):

    def test__${testname}(self):
        for cmd in ${cmdlines}:
            self.assertEqual(0,os.system(cmd))

if __name__ == '__main__':
    unittest.main()
EOF
    rm -f $cmdfile
}

main() {
    __HOST=false

    # check config file
    check_test_config

    for ARG in host_*; do
        [ -f "$ARG" ] || continue
        case "$ARG" in
        host_*.sh)
            process_host_script "$ARG"
            __HOST=true
            ;;
        esac
    done

    $__HOST || {
        for ARG in *; do
            [ -f "$ARG" ] || continue
            case "$ARG" in
            *.sh)
                process_target_script "$ARG"
                ;;
            *.c | *.cpp)
                process_target_cpp "$ARG"
                ;;
            esac
        done
    }

    for _PYTHON in *.py; do
        python $_PYTHON || E=1
    done
}

main "$@"

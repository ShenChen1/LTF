#!/usr/bin/env bash

set -aeu
source _shellflags

process_host_script() {
    local tmp=$(mktemp /tmp/$(basename $0).XXXXX)
    echo "sh $1" >>$tmp
    create_unittest $tmp $1
}

process_target_script() {
    local tmp=$(mktemp /tmp/$(basename $0).XXXXX)
    echo "putfile \'$1\' \'$1\'" >>$tmp
    echo "invoke \'sh $1\'" >>$tmp
    echo "invoke \'rm $1\'" >>$tmp
    create_unittest $tmp $1
}

process_target_cpp() {
    local tmp=$(mktemp /tmp/$(basename $0).XXXXX)
    local app=__${1%%.*}
    echo "compile \'$1\'" >>$tmp
    echo "putfile \'$app\' \'$app\'" >>$tmp
    echo "invoke \'chmod +x $app && ./$app\'" >>$tmp
    echo "invoke \'rm $app\'" >>$tmp
    create_unittest $tmp $1
}

process_python_testcase() {
    local -a SED_PYTHON_RULES=(
        '/^import unittest/a from xmlrunner import XMLTestRunner'
        's/unittest\.main\((.*)\)/unittest.main(testRunner=XMLTestRunner(output="xml-reports"))/'
    )

    if "${XMLOUTPUT-false}"; then
        for rule in "${SED_PYTHON_RULES[@]}"; do
            sed -i -re "$rule" "$1"
        done
    fi

    echo "$1"
}

create_unittest() {
    local -r cmdfile="$1"
    local -r testname="${2%%.*}"
    local -r classname="${PWD##*/}"
    local -r pyunittest="__unittest_${classname}_${testname}.py"

    local cmdlines="["
    while read line; do
        cmdlines="${cmdlines}\"${line}\", "
    done <"$cmdfile"
    cmdlines="${cmdlines} \"true\"]"

    local output="None"
    if "${XMLOUTPUT-false}"; then
        output="subprocess.PIPE"
    fi

    cat >$pyunittest <<EOF
# automatically created by $(basename $0)
import os
import sys
import subprocess
import unittest

class Test__${classname}(unittest.TestCase):

    def test__${testname}(self):
        for cmd in ${cmdlines}:
            proc = subprocess.Popen(cmd,stdout=${output},stderr=${output},shell=True)
            result = proc.communicate()
            if result[0] != None and result[0] != '':
                sys.stdout.write(result[0])
            if result[1] != None and result[0] != '':
                sys.stderr.write(result[1])
            self.assertEqual(0, proc.returncode)

if __name__ == '__main__':
    unittest.main()
EOF
    rm -f $cmdfile
}

main() {
    local __host=false

    # check config file
    checktestconfig || exit 1

    for file in host_*; do
        [ -f "$file" ] || continue
        case "$file" in
        host_*.sh)
            process_host_script "$file"
            __host=true
            ;;
        esac
    done

    $__host || {
        for file in *; do
            [ -f "$file" ] || continue
            case "$file" in
            *.sh)
                process_target_script "$file"
                ;;
            *.c | *.cpp)
                process_target_cpp "$file"
                ;;
            esac
        done
    }

    local E=0
    for _py in *.py; do
        python $(process_python_testcase "$_py") || E=1
    done
    exit $E
}

main "$@"

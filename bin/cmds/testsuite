#!/usr/bin/env bash

set -aeu
source _shellflags

copyfiles() {
    _V="$1"
    _FROM="$2"
    _TO="$3"

    for _FILE in "$_FROM"/*; do
        [ -e "$_FILE" ] || continue
        [ ! -h "$_FILE" ] || continue
        _FILENAME=$(basename "$_FILE")
        _T="$_TO/$_FILENAME"
        if [ ! -e "$_T" ]; then
            if [ -d "$_FILE" ]; then
                cp -rf "$_FILE" "$_T"
            else
                cat $_V "$_FILE" >"$_T"
            fi
        else
            _N=1
            while true; do
                case "$_FILENAME" in
                *.*)
                    _P="${_FILENAME%.*}"
                    _S="${_FILENAME##*.}"
                    _T="$_TO/$_P""_$_N.$_S"
                    ;;
                *) _T="$_TO/$_FILENAME"_$_N ;;
                esac
                [ -e "$_T" ] || break
                _N=$(expr $_N + 1)
            done
            if [ -d "$_FILE" ]; then
                cp -rf "$_FILE" "$_T"
            else
                cat $_V "$_FILE" >"$_T"
            fi
        fi
    done
}

do_work() {
    makecall -C "$1" $2
}

do_result() {
    local -r path="$1"

    if [ "${XMLOUTPUT-false}" = true ]; then
        mkdir -p xml-reports
        if [ -d "$path"/xml-reports ]; then
            copyfiles -v "$path/xml-reports" xml-reports
        fi
    fi
}

do_serial() {
    local -r tests="$1"
    local -r paramters="$2"

    for t in $tests; do
        echo -e "\n+++ start: $GOAL $t ..."
        do_work "$t" "$paramters"
        do_result "$t"
        echo -e "+++ finish: $GOAL $t ..."
    done
}

killtree() {
    local _pid=$1
    local _sig=${2:-SIGTERM}

    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child} ${_sig}
    done
    kill -s ${_sig} ${_pid} || true
}

do_parallel() {
    local -r tests="$1"
    local _pids=""

    trap_handler() {
        for p in $_pids; do
            chains=$(pstree -p $p)
            [ "$chains" != "" ] && echo $chains
            killtree $p
        done
        exit 1
    }

    trap trap_handler 1 2 3 15
    for t in $tests; do
        (do_work "$t" "$paramters") &
        _pids="$_pids $!"
    done
    wait
    _pids=""

    for t in $tests; do
        do_result "$t"
    done
}

main() {
    local -r tests=${TESTSUITE_TESTS-}
    unset TESTSUITE_TESTS
    local -r paramters=${GOALPARAMTERS-}
    unset GOALPARAMTERS

    if ${TESTSUITE_PARALLEL:-false}; then
        do_parallel "$tests" "$paramters"
    else
        do_serial "$tests" "$paramters"
    fi
}

main "$@"
